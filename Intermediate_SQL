-- Creating a new database

/* Connecting to PostgreSQL database

psql -h pg.pg4e.com -p 5432 -U pg4e_73285570e1 pg4e_73285570e1
*/

-- Creating the table pg4e_debug

CREATE TABLE pg4e_debug (
  id SERIAL,
  query VARCHAR(4096),
  result VARCHAR(4096),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY(id)
);

-- View the contents of this table 
SELECT query, result, created_at FROM pg4e_debug;

-- Creating the table pg4e_result

CREATE TABLE pg4e_result (
  id SERIAL,
  link_id INTEGER UNIQUE,
  score FLOAT,
  title VARCHAR(4096),
  note VARCHAR(4096),
  debug_log VARCHAR(8192),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP
);

-- using ALTER TABLE
-- Add a column to your pg4e_debug table. The column can be any type you like - like INTEGER. neon289.
ALTER TABLE pg4e_debug ADD COLUMN neon289 INTEGER;

--View your data

SELECT neon289 FROM pg4e_debug LIMIT 1;

-- Using SELECT DISTINCT
/* Access details for a readonly database:

-- Connecting to readonly database

-- psql -h pg.pg4e.com -p 5432 -U readonly readonly*/

-- Check the schema for the taxdata table

/*
readonly=# \d+ taxdata
  Column  |          Type          |
----------+------------------------+
 id       | integer                |
 ein      | integer                |
 name     | character varying(255) |
 year     | integer                |
 revenue  | bigint                 |
 expenses | bigint                 |
 purpose  | text                   |
 ptid     | character varying(255) |
 ptname   | character varying(255) |
 city     | character varying(255) |
 state    | character varying(255) |
 url      | character varying(255) |
 */

-- Find the distinct values in the state column of the taxdata table in ascending order. Your query should only return these five rows
/* SELECT DISTINCT state FROM taxdata ORDER BY state ASC LIMIT 5;

AE
AK
AL
AP
AR
*/

-- Creating a Stored Procedure
/*Connect to the PostgreSQL database
psql -h pg.pg4e.com -p 5432 -U pg4e_73285570e1 pg4e_73285570e1 
*/
-- Create the table keyvalue

CREATE TABLE keyvalue ( 
  id SERIAL,
  key VARCHAR(128) UNIQUE,
  value VARCHAR(128) UNIQUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY(id)
);

-- Add a stored procedure so that every time a record is updated, the updated_at variable is automatically set to the current time

-- Create the trigger function
CREATE OR REPLACE FUNCTION trigger_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger that fires the trigger function on UPDATE
CREATE TRIGGER set_updated_at
BEFORE UPDATE ON keyvalue
FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_at();

/* Check the details of the stored procedure

\df trigger_set_updated_at

List of functions
 Schema |          Name          | Result data type | Argument data types | Type 
--------+------------------------+------------------+---------------------+------
 public | trigger_set_updated_at | trigger          |                     | func
(1 row)

*/

--Musical tracks many-to-one

-- Create the 'album' table
CREATE TABLE album (
  id SERIAL,
  title VARCHAR(128) UNIQUE,
  PRIMARY KEY(id)
);

-- Create the 'track' table with a foreign key reference to 'album'
CREATE TABLE track (
    id SERIAL,
    title VARCHAR(128),
    len INTEGER, rating INTEGER, count INTEGER,
    album_id INTEGER REFERENCES album(id) ON DELETE CASCADE,
    UNIQUE(title, album_id),
    PRIMARY KEY(id)
);

-- Drop the 'track_raw' table if it exists
DROP TABLE IF EXISTS track_raw;

-- Create the 'track_raw' table to hold raw data
CREATE TABLE track_raw
 (title TEXT, artist TEXT, album TEXT, album_id INTEGER,
  count INTEGER, rating INTEGER, len INTEGER);

-- copy https://www.pg4e.com/tools/sql/library.csv?PHPSESSID=63c5f0c79e884dad9c14aabdeb15cb23%22

-- Update 'album_id' in 'track_raw' based on matching album titles
UPDATE track_raw SET album_id = (SELECT album.id FROM album WHERE album.title = track_raw.album);

-- Load data from 'library.csv' into 'track_raw' table
\copy track_raw(title, artist, album, album_id, count, rating, len) FROM 'library.csv' DELIMITER ',' CSV HEADER;

-- Insert distinct albums into the 'album' table
INSERT INTO album (title)
SELECT DISTINCT album FROM track_raw;

-- Update 'album_id' in 'track_raw' based on matching album titles again
UPDATE track_raw SET album_id = (SELECT album.id FROM album WHERE album.title = track_raw.album);

-- Copy data from 'track_raw' to 'track' while dropping artist and album text fields
INSERT INTO track (title, len, rating, count, album_id)
SELECT title, len, rating, count, album_id FROM track_raw;

-- Query to verify the results 
SELECT track.title, album.title
FROM track
JOIN album ON track.album_id = album.id
ORDER BY track.title
LIMIT 3;







